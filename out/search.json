[
  {
    "objectID": "main.html",
    "href": "main.html",
    "title": "Importing the data set",
    "section": "",
    "text": "import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.pyplot import figure\n\n\ndf = pd.read_csv(\"Input/spotify-2023.csv\", encoding = 'latin-1')\ndf.head()\n\n\n\n\n\n\n\n\n\ntrack_name\nartist(s)_name\nartist_count\nreleased_year\nreleased_month\nreleased_day\nin_spotify_playlists\nin_spotify_charts\nstreams\nin_apple_playlists\n...\nbpm\nkey\nmode\ndanceability_%\nvalence_%\nenergy_%\nacousticness_%\ninstrumentalness_%\nliveness_%\nspeechiness_%\n\n\n\n\n0\nSeven (feat. Latto) (Explicit Ver.)\nLatto, Jung Kook\n2\n2023\n7\n14\n553\n147\n141381703\n43\n...\n125\nB\nMajor\n80\n89\n83\n31\n0\n8\n4\n\n\n1\nLALA\nMyke Towers\n1\n2023\n3\n23\n1474\n48\n133716286\n48\n...\n92\nC#\nMajor\n71\n61\n74\n7\n0\n10\n4\n\n\n2\nvampire\nOlivia Rodrigo\n1\n2023\n6\n30\n1397\n113\n140003974\n94\n...\n138\nF\nMajor\n51\n32\n53\n17\n0\n31\n6\n\n\n3\nCruel Summer\nTaylor Swift\n1\n2019\n8\n23\n7858\n100\n800840817\n116\n...\n170\nA\nMajor\n55\n58\n72\n11\n0\n11\n15\n\n\n4\nWHERE SHE GOES\nBad Bunny\n1\n2023\n5\n18\n3133\n50\n303236322\n84\n...\n144\nA\nMinor\n65\n23\n80\n14\n63\n11\n6\n\n\n\n\n5 rows × 24 columns\n\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 953 entries, 0 to 952\nData columns (total 24 columns):\n #   Column                Non-Null Count  Dtype \n---  ------                --------------  ----- \n 0   track_name            953 non-null    object\n 1   artist(s)_name        953 non-null    object\n 2   artist_count          953 non-null    int64 \n 3   released_year         953 non-null    int64 \n 4   released_month        953 non-null    int64 \n 5   released_day          953 non-null    int64 \n 6   in_spotify_playlists  953 non-null    int64 \n 7   in_spotify_charts     953 non-null    int64 \n 8   streams               953 non-null    object\n 9   in_apple_playlists    953 non-null    int64 \n 10  in_apple_charts       953 non-null    int64 \n 11  in_deezer_playlists   953 non-null    object\n 12  in_deezer_charts      953 non-null    int64 \n 13  in_shazam_charts      903 non-null    object\n 14  bpm                   953 non-null    int64 \n 15  key                   858 non-null    object\n 16  mode                  953 non-null    object\n 17  danceability_%        953 non-null    int64 \n 18  valence_%             953 non-null    int64 \n 19  energy_%              953 non-null    int64 \n 20  acousticness_%        953 non-null    int64 \n 21  instrumentalness_%    953 non-null    int64 \n 22  liveness_%            953 non-null    int64 \n 23  speechiness_%         953 non-null    int64 \ndtypes: int64(17), object(7)\nmemory usage: 178.8+ KB\n\n\n\ndf.isna().sum()\n\ntrack_name               0\nartist(s)_name           0\nartist_count             0\nreleased_year            0\nreleased_month           0\nreleased_day             0\nin_spotify_playlists     0\nin_spotify_charts        0\nstreams                  0\nin_apple_playlists       0\nin_apple_charts          0\nin_deezer_playlists      0\nin_deezer_charts         0\nin_shazam_charts        50\nbpm                      0\nkey                     95\nmode                     0\ndanceability_%           0\nvalence_%                0\nenergy_%                 0\nacousticness_%           0\ninstrumentalness_%       0\nliveness_%               0\nspeechiness_%            0\ndtype: int64\n\n\n\ndf.shape\n\n(953, 24)\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\n\nartist_count\nreleased_year\nreleased_month\nreleased_day\nin_spotify_playlists\nin_spotify_charts\nin_apple_playlists\nin_apple_charts\nin_deezer_charts\nbpm\ndanceability_%\nvalence_%\nenergy_%\nacousticness_%\ninstrumentalness_%\nliveness_%\nspeechiness_%\n\n\n\n\ncount\n953.000000\n953.000000\n953.000000\n953.000000\n953.000000\n953.000000\n953.000000\n953.000000\n953.000000\n953.000000\n953.00000\n953.000000\n953.000000\n953.000000\n953.000000\n953.000000\n953.000000\n\n\nmean\n1.556139\n2018.238195\n6.033578\n13.930745\n5200.124869\n12.009444\n67.812172\n51.908709\n2.666317\n122.540399\n66.96957\n51.431270\n64.279119\n27.057712\n1.581322\n18.213012\n10.131165\n\n\nstd\n0.893044\n11.116218\n3.566435\n9.201949\n7897.608990\n19.575992\n86.441493\n50.630241\n6.035599\n28.057802\n14.63061\n23.480632\n16.550526\n25.996077\n8.409800\n13.711223\n9.912888\n\n\nmin\n1.000000\n1930.000000\n1.000000\n1.000000\n31.000000\n0.000000\n0.000000\n0.000000\n0.000000\n65.000000\n23.00000\n4.000000\n9.000000\n0.000000\n0.000000\n3.000000\n2.000000\n\n\n25%\n1.000000\n2020.000000\n3.000000\n6.000000\n875.000000\n0.000000\n13.000000\n7.000000\n0.000000\n100.000000\n57.00000\n32.000000\n53.000000\n6.000000\n0.000000\n10.000000\n4.000000\n\n\n50%\n1.000000\n2022.000000\n6.000000\n13.000000\n2224.000000\n3.000000\n34.000000\n38.000000\n0.000000\n121.000000\n69.00000\n51.000000\n66.000000\n18.000000\n0.000000\n12.000000\n6.000000\n\n\n75%\n2.000000\n2022.000000\n9.000000\n22.000000\n5542.000000\n16.000000\n88.000000\n87.000000\n2.000000\n140.000000\n78.00000\n70.000000\n77.000000\n43.000000\n0.000000\n24.000000\n11.000000\n\n\nmax\n8.000000\n2023.000000\n12.000000\n31.000000\n52898.000000\n147.000000\n672.000000\n275.000000\n58.000000\n206.000000\n96.00000\n97.000000\n97.000000\n97.000000\n91.000000\n97.000000\n64.000000\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10,10))\nsns.heatmap(df.corr(numeric_only=True), annot=True, linewidth=.5, ax=ax)\nplt.show()\n\n\n\n\n\n\n\n\n\nConverting column types\n\ndf['streams'] = pd.to_numeric(df['streams'], errors= 'coerce')\ndf['in_deezer_playlists'] = pd.to_numeric(df['in_deezer_playlists'], errors= 'coerce')\ndf['in_shazam_charts'] = pd.to_numeric(df['in_shazam_charts'],errors='coerce')\n\n\n\nHandling missing values\n\ndf['key'] = df['key'].fillna('Unknown')\ndf['in_shazam_charts'] = df['in_shazam_charts'].fillna(0)\n\n#Fill NaNs with zero or another appropriate value\ndf.fillna(0, inplace= True)\n\n#Ensure all columns have finite value\ndf.replace([float('inf'), float('-inf')], 0, inplace=True)\n\n\n\nDataset for the songs released in 2023\n\n#filtering data according to year 2023\nyear_2023 = df[df['released_year']==2023]\nyear_2023.head()\n\n\n\n\n\n\n\n\n\ntrack_name\nartist(s)_name\nartist_count\nreleased_year\nreleased_month\nreleased_day\nin_spotify_playlists\nin_spotify_charts\nstreams\nin_apple_playlists\n...\nbpm\nkey\nmode\ndanceability_%\nvalence_%\nenergy_%\nacousticness_%\ninstrumentalness_%\nliveness_%\nspeechiness_%\n\n\n\n\n0\nSeven (feat. Latto) (Explicit Ver.)\nLatto, Jung Kook\n2\n2023\n7\n14\n553\n147\n141381703.0\n43\n...\n125\nB\nMajor\n80\n89\n83\n31\n0\n8\n4\n\n\n1\nLALA\nMyke Towers\n1\n2023\n3\n23\n1474\n48\n133716286.0\n48\n...\n92\nC#\nMajor\n71\n61\n74\n7\n0\n10\n4\n\n\n2\nvampire\nOlivia Rodrigo\n1\n2023\n6\n30\n1397\n113\n140003974.0\n94\n...\n138\nF\nMajor\n51\n32\n53\n17\n0\n31\n6\n\n\n4\nWHERE SHE GOES\nBad Bunny\n1\n2023\n5\n18\n3133\n50\n303236322.0\n84\n...\n144\nA\nMinor\n65\n23\n80\n14\n63\n11\n6\n\n\n5\nSprinter\nDave, Central Cee\n2\n2023\n6\n1\n2186\n91\n183706234.0\n67\n...\n141\nC#\nMajor\n92\n66\n58\n19\n0\n8\n24\n\n\n\n\n5 rows × 24 columns\n\n\n\n\n\n\nTop 5 songs and their artists\n\ntop_songs_and_artists= df[['track_name','artist(s)_name','streams']].sort_values(by='streams',ascending=False).head()\ntop_songs_and_artists\n\n\n\n\n\n\n\n\n\ntrack_name\nartist(s)_name\nstreams\n\n\n\n\n55\nBlinding Lights\nThe Weeknd\n3.703895e+09\n\n\n179\nShape of You\nEd Sheeran\n3.562544e+09\n\n\n86\nSomeone You Loved\nLewis Capaldi\n2.887242e+09\n\n\n620\nDance Monkey\nTones and I\n2.864792e+09\n\n\n41\nSunflower - Spider-Man: Into the Spider-Verse\nPost Malone, Swae Lee\n2.808097e+09\n\n\n\n\n\n\n\n\n\n\nCreating Plot\n\n#Set the style\nsns.set(style=\"whitegrid\")\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = sns.barplot(\n  x = 'streams',\n  y = 'track_name',\n  hue='track_name' ,\n  data = top_songs_and_artists,\n  palette= \"viridis\",\n  edgecolor= 'black'\n)\n\n# Add annotations\nfor bar in bars.patches:\n  plt.annotate(\n    format(bar.get_width(), ','),\n    (bar.get_width(), bar.get_y() + bar.get_height() / 2),\n    ha = 'center',\n    va = 'center',\n    xytext=(5,0),\n    textcoords='offset points'\n  )\n\n# Set titles and labels\nax.set_title(\"Top 5 Songs and The Artists\", fontsize = 16, weight = 'bold')\nax.set_xlabel(\"Number of Streams\", fontsize=14)\nax.set_ylabel(\"Tracks' Names\", fontsize= 14)\n\n#Remove the top and right spines \nsns.despine(left = True, bottom = True)\n#show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\n\nCreating Interractive Plot\n\nimport plotly.express as px\n\n#Create the plot\nfig = px.bar(\n  top_songs_and_artists,\n  x='streams',\n  y='track_name',\n  text = 'streams',\n  color = 'streams',\n  color_continuous_scale='viridis',\n  title=\"Top 5 Songs and The Artists\",\n)\n\n#Update the layout\nfig.update_layout(\n  xaxis_title=\"Number of Streams\",\n  yaxis_title= \"Tracks' Names\",\n  title_font_size=22,\n  title_font_family=\"Arial\",\n  xaxis=dict(showgrid=False),\n  yaxis=dict(showgrid=False)\n)\n\n#Update the traces\nfig.update_traces(texttemplate='%{text:,}', textposition='outside')\n\n#show the plot\nfig.show()\n\n                                                \n\n\n\n\nNumeber of songs over year on Spotify\n\nyear_song= df.groupby('released_year')['track_name'].count()\nyear_song\n\nreleased_year\n1930      1\n1942      1\n1946      1\n1950      1\n1952      1\n1957      2\n1958      3\n1959      2\n1963      3\n1968      1\n1970      2\n1971      1\n1973      1\n1975      2\n1979      1\n1982      2\n1983      1\n1984      4\n1985      2\n1986      2\n1987      1\n1991      2\n1992      1\n1994      1\n1995      2\n1996      1\n1997      1\n1998      1\n1999      5\n2000      4\n2002      6\n2003      2\n2004      4\n2005      1\n2007      1\n2008      2\n2010      7\n2011     10\n2012     10\n2013     13\n2014     13\n2015     11\n2016     18\n2017     23\n2018     10\n2019     36\n2020     37\n2021    119\n2022    402\n2023    175\nName: track_name, dtype: int64\n\n\n\n#Set the style\nsns.set(style = \"whitegrid\")\n\n# First plot: Number of songs over years\nfig, ax1 = plt.subplots(figsize=(12,6))\nax1.plot(year_song.index,year_song.values,marker='o', linestyle='-', color='green',label='All years')\n\nax1.set_xlabel(\"Released Years\", fontsize=14),\nax1.set_ylabel(\"Number of Tracks\", fontsize= 14),\nax1.set_title(\"Released Songs Over Years on Spotify\", fontsize=16, weight='bold')\nax1.legend()\nax1.grid(True)\n\n# show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\nyear1= df[(df['released_year']&gt;=2018) & (df['released_year']&lt;= 2023)]\nyear2=year1.groupby('released_year')['track_name'].count()\nyear2\n\nreleased_year\n2018     10\n2019     36\n2020     37\n2021    119\n2022    402\n2023    175\nName: track_name, dtype: int64\n\n\n\nfig, ax2 = plt.subplots(figsize=(12,6))\nax2.plot(year2.index, year2.values,marker='o', linestyle='-', color='green',label='2018-2023')\n\nax2.set_xlabel(\"Released Years\", fontsize=14),\nax2.set_ylabel(\"Number of Tracks\", fontsize= 14),\nax2.set_title(\"Released Songs Over Past 6 Years on Spotify\", fontsize=16, weight='bold')\nax2.legend()\nax2.grid(True)\n\n# show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\n\nInterractive plots\n\n#First plot: Number of songs over years\nfig1 = px.line(\n  year_song.reset_index(),\n  x = 'released_year',\n  y = 'track_name',\n  title= 'Released Songs Over years on Spotify',\n  labels= {'released_year': 'Released Years', 'track_name': 'Number of Tracks'}\n)\n\nfig1.update_traces(mode='lines+markers',line_color=\"green\")\nfig1.update_layout(title_font_size=22, title_font_family=\"Arial\")\n\n# Second plot: Number of songs over the past 6 years\nfig2 = px.line(\n  year2.reset_index(),\n  x = 'released_year',\n  y = 'track_name',\n  title= 'Released Songs Over the past 6 years on Spotify',\n  labels= {'released_year': 'Released Years', 'track_name': 'Number of Tracks'}\n)\n\nfig2.update_traces(mode='lines+markers',line_color=\"green\")\nfig2.update_layout(title_font_size=22, title_font_family=\"Arial\")\n\n#show the plots\nfig1.show()\nfig2.show()\n\n                                                \n\n\n                                                \n\n\n\n\nPlaylist vs streams\n\n# Create subplots\nfig, axs = plt.subplots(1,2, figsize = (16,6), sharey=True)\n\n#Scatter plots for Spotify Playlists vs Streams\naxs[0].scatter(df['in_spotify_playlists'],df['streams'],color='blue',alpha=0.5)\naxs[0].set_xlabel('Number of Spotify Playlists')\naxs[0].set_ylabel('Streams')\naxs[0].set_title('Spotify Playlists vs Streams')\naxs[0].grid(True)\n\n#Scatter plot for Apple Playlists vs Streams\naxs[1].scatter(df['in_apple_playlists'],df['streams'],color='green',alpha=0.5)\naxs[1].set_xlabel('Number of Apple Playlists')\naxs[1].set_ylabel('Streams')\naxs[1].set_title('Apple Playlists vs Streams')\naxs[1].grid(True)\n\n#Set a common title\nfig.suptitle('Number of Playlists vs Streams (Spotify vs Apple Music)', fontsize=16)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nAnalyzing features\n\n#Select the columns for analysis\nfeatures = ['danceability_%','valence_%','energy_%','acousticness_%','instrumentalness_%','liveness_%','speechiness_%']\nsns.pairplot(df[features],diag_kind='kde', height= 1.75)\nplt.suptitle('Pairwise Relationships between Audio Feature',y=1.02)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nCreating radar Chart for 1st song\n\nfrom math import pi\ndef create_radar_chart(df, row, title):\n  categories = list(df[features].columns)\n  values = df[features].loc[row].values.flatten().tolist()\n  values += values[:1]\n\n  angles = [n/ float(len(categories)) * 2 * pi for n in range(len(categories))]\n  angles += angles[:1]\n\n  ax = plt.subplot(111, polar=True)\n  plt.xticks(angles[:-1],categories,color='grey',size=8)\n  ax.plot(angles,values,linewidth=1,linestyle='solid')\n  ax.fill(angles,values,'b',alpha=0.1)\n  plt.title(title,size=11,color='b',y=1.1)\n\n\nplt.figure(figsize=(6,6))\ncreate_radar_chart(df,0,df['track_name'].iloc[0])\nplt.show()\n\n\n\n\n\n\n\n\n\n\nCreating clusters\n\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=5, random_state=0, n_init=10).fit(df[features])\ndf['cluster']= kmeans.labels_\n\n#plot clusters\nplt.figure(figsize=(12,8))\nsns.scatterplot(x='danceability_%', y='energy_%', hue='cluster', palette='viridis', data=df, alpha=0.7)\nplt.title('Cluster Analysis of Audio Features')\nplt.xlabel('Danceability (%)')\nplt.ylabel('Energy (%)')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nTrends of the future over time\n\naudio_features = ['danceability_%','valence_%','energy_%','acousticness_%','instrumentalness_%','liveness_%','speechiness_%']\ntrends = df.groupby('released_year')[audio_features].mean().reset_index()\n\n# Plotting trends over time\nfig, ax = plt.subplots(len(audio_features),1, figsize=(14,20),sharex=True)\nfor i, feature in enumerate(audio_features):\n  sns.lineplot(x='released_year', y = feature, data=trends, ax =ax[i])\n  ax[i].set_title(f'Trends of {feature.replace(\"_%\",\"\")} over Years')\n  ax[i].set_ylabel(feature.replace(\"_%\",\" (%)\"))\n\nplt.xlabel('Released Year')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nHeatmap for frequency of the chart appearance\n\nheatmap_data= df[['in_spotify_charts','in_apple_charts','in_deezer_charts','in_shazam_charts']]\n\nplt.figure(figsize=(10,8))\nsns.heatmap(heatmap_data.corr(),annot=True,cmap='coolwarm',fmt= '.2f')\nplt.title('Correlation Heatmap of Chart Apperances')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nMax Difference between danceability and energy\n\nyearly_data = df.groupby('released_year').agg({'danceability_%': 'mean', 'energy_%':'mean'}).reset_index()\n\nfig, ax = plt.subplots(figsize=(10,6))\n\n#Plot danceability and energy as plot lines\nax.plot(yearly_data['released_year'], yearly_data['danceability_%'], label='Danceability', color = 'blue')\nax.plot(yearly_data['released_year'], yearly_data['energy_%'], label='Energy',color = 'salmon')\n\n#Highlight the maximum difference\nyearly_data['difference'] = abs(yearly_data['danceability_%'] - yearly_data['energy_%'])\nmax_diff_year=  yearly_data.loc[yearly_data['difference'].idxmax()]\n\n# Annotations with text in the bottom left corner\nax.annotate(f\"Max diff: {max_diff_year['difference']:.2f}%\",\n            xy=(max_diff_year['released_year'],max_diff_year['danceability_%']),\n            xytext=(0.65, 0.25),# Fractional Cordinates (0.05,0.05) for the bottom left corner\n            textcoords= 'figure fraction',\n            arrowprops={'arrowstyle':\"-&gt;\",'color':'gray'},ha ='left')\n\nax.set_xlabel('Year')\nax.set_ylabel('Percentage')\nax.set_title('Average Danceability and Energy by Year')\nax.legend()\n\nplt.show()\n\n\n\n\n\n\n\n\n\n# Scatter Plot with Trend Line: Number of Artists vs Realead Year\ndef scatter_plot_with_trendline(df, x_col,y_col, title, xlabel, ylabel):\n  plt.figure(figsize=(10,6))\n  sns.regplot(x=df[x_col],y=df[y_col],scatter_kws={'alpha':0.5, 's':10}, line_kws={'color':'red'})\n  plt.title(title)\n  plt.xlabel(xlabel)\n  plt.ylabel(ylabel)\n  plt.grid(True)\n  plt.show()\n\nscatter_plot_with_trendline(df, 'released_year', 'artist_count', 'Number of Artist vs Released Year', 'Release Year', 'Number of Artists')\n\n\n\n\n\n\n\n\n\n\nMax collaborations\n\n# Add a new column to indicate if the track is a collaboration (more than one artist)\ndf['is_collaboration']= df['artist_count'] &gt; 1\n\n# Filter the DataFrame to include only the years between 1990 and 2023\nfiltered_df= df[(df['released_year']&gt;= 1995) & (df['released_year'] &lt;=2023)]\n\n# Group by released year and count the number of collaboration and solo tracks \nyearly_collaborations = filtered_df.groupby('released_year')['is_collaboration'].sum().reset_index()\nyearly_solo_tracks = filtered_df.groupby('released_year')['is_collaboration'].count().reset_index()\nyearly_solo_tracks['is_collaboration'] -= yearly_collaborations['is_collaboration']\n\n# Combine the data into a single DataFrame for plotting \nyearly_data = pd.DataFrame({'Year':yearly_collaborations['released_year'],\n                            'Collaborations': yearly_collaborations['is_collaboration'],\n                            'Solo Tracks': yearly_solo_tracks['is_collaboration']\n                            })\n# Plot\nplt.figure(figsize=(12,6))\nplt.stackplot(yearly_data['Year'], yearly_data['Solo Tracks'], yearly_data['Collaborations'], labels= ['Solo Tracks','Collaborations'],colors = ['skyblue','salmon'])\nplt.xlabel('Release Year')\nplt.ylabel('Number of Tracks')\nplt.title('Number of Solo Tracks and Collaborations by Released Year(1990-2023)')\nplt.legend(loc = 'upper left')\nplt.grid(axis = 'y', linestyle = '--', alpha = 0.7)\n\n# Highlight the year with the most collaborations\n\nmax_collab_year = yearly_data.loc[yearly_data['Collaborations'].idxmax()]\nplt.annotate(\n             f\"Max collaborations: {max_collab_year['Collaborations']}\", \n             xy = (max_collab_year['Year'], max_collab_year['Collaborations']),\n             xytext= (max_collab_year['Year'], max_collab_year['Collaborations'] + 240),\n             arrowprops = dict(facecolor='black', arrowstyle = '-&gt;'), ha = 'center'\n             )\n\nplt.show()\n\n\n\n\n\n\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\n\ntrack_name\nartist(s)_name\nartist_count\nreleased_year\nreleased_month\nreleased_day\nin_spotify_playlists\nin_spotify_charts\nstreams\nin_apple_playlists\n...\nmode\ndanceability_%\nvalence_%\nenergy_%\nacousticness_%\ninstrumentalness_%\nliveness_%\nspeechiness_%\ncluster\nis_collaboration\n\n\n\n\n0\nSeven (feat. Latto) (Explicit Ver.)\nLatto, Jung Kook\n2\n2023\n7\n14\n553\n147\n141381703.0\n43\n...\nMajor\n80\n89\n83\n31\n0\n8\n4\n3\nTrue\n\n\n1\nLALA\nMyke Towers\n1\n2023\n3\n23\n1474\n48\n133716286.0\n48\n...\nMajor\n71\n61\n74\n7\n0\n10\n4\n3\nFalse\n\n\n2\nvampire\nOlivia Rodrigo\n1\n2023\n6\n30\n1397\n113\n140003974.0\n94\n...\nMajor\n51\n32\n53\n17\n0\n31\n6\n1\nFalse\n\n\n3\nCruel Summer\nTaylor Swift\n1\n2019\n8\n23\n7858\n100\n800840817.0\n116\n...\nMajor\n55\n58\n72\n11\n0\n11\n15\n3\nFalse\n\n\n4\nWHERE SHE GOES\nBad Bunny\n1\n2023\n5\n18\n3133\n50\n303236322.0\n84\n...\nMinor\n65\n23\n80\n14\n63\n11\n6\n1\nFalse\n\n\n\n\n5 rows × 26 columns\n\n\n\n\n\n\nStreams by Music Mode\n\nplt.figure(figsize=(10, 6))\nsns.set_theme(style = \"whitegrid\")\n\n#Create violin plot with customizations\nsns.violinplot(data=df, x=\"mode\", y=\"streams\",hue = \"mode\", palette=\"Set3\", inner=\"quartile\",legend=False)\n\n#Adding titles and labels\nplt.title('Streams by Music Mode')\nplt.xlabel('Mode')\nplt.ylabel('Sterams')\n\n#Adjusting layout\nplt.tight_layout()\n\n#Show plot\nplt.show()"
  }
]